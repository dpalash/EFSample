//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets61C5D45962E3EE87F55ABCDB11E77B3D6C262395D46A75EF6DD09D510BFE9D36))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets61C5D45962E3EE87F55ABCDB11E77B3D6C262395D46A75EF6DD09D510BFE9D36 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets61C5D45962E3EE87F55ABCDB11E77B3D6C262395D46A75EF6DD09D510BFE9D36()
        {
            this.EdmEntityContainerName = "TestDBFirst";
            this.StoreEntityContainerName = "TestDBModelStoreContainer";
            this.HashOverMappingClosure = "8c5f2f77c54ef2e127d04514ad9f72635c9f62780738237a42f94954b1233afb";
            this.HashOverAllExtentViews = "96413dd670ac0955b11e6215d3abb971767c32de3375e80d0f6c4c7bd65bd30f";
            this.ViewCount = 4;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for TestDBModelStoreContainer.EncCells
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TestDBModelStoreContainer.EncCells", @"
    SELECT VALUE -- Constructing EncCells
        [TestDBModel.Store.EncCells](T1.EncCells_Id, T1.EncCells_Issuer3Id, T1.EncCells_CellName, T1.EncCells_Description, T1.EncCells_IsForSale, T1.EncCells_Discriminator)
    FROM (
        SELECT 
            T.Id AS EncCells_Id, 
            T.Issuer3Id AS EncCells_Issuer3Id, 
            T.CellName AS EncCells_CellName, 
            T.Description AS EncCells_Description, 
            T.IsForSale AS EncCells_IsForSale, 
            CAST(NULL AS [Edm.String]) AS EncCells_Discriminator, 
            True AS _from0
        FROM TestDBFirst.EncCells AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TestDBModelStoreContainer.issuers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TestDBModelStoreContainer.issuers", @"
    SELECT VALUE -- Constructing issuers
        [TestDBModel.Store.issuers](T1.[issuers._Id], T1.[issuers._Issuer], T1.[issuers._IssuerShortName], T1.[issuers._Active], T1.issuers_Discriminator)
    FROM (
        SELECT 
            T.C_Id AS [issuers._Id], 
            T.C_Issuer AS [issuers._Issuer], 
            T.C_IssuerShortName AS [issuers._IssuerShortName], 
            T.C_Active AS [issuers._Active], 
            CAST(NULL AS [Edm.String]) AS issuers_Discriminator, 
            True AS _from0
        FROM TestDBFirst.issuers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TestDBFirst.EncCells
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TestDBFirst.EncCells", @"
    SELECT VALUE -- Constructing EncCells
        [TestDBModel.EncCell](T1.EncCell_Id, T1.EncCell_Issuer3Id, T1.EncCell_CellName, T1.EncCell_Description, T1.EncCell_IsForSale)
    FROM (
        SELECT 
            T.Id AS EncCell_Id, 
            T.Issuer3Id AS EncCell_Issuer3Id, 
            T.CellName AS EncCell_CellName, 
            T.Description AS EncCell_Description, 
            T.IsForSale AS EncCell_IsForSale, 
            True AS _from0
        FROM TestDBModelStoreContainer.EncCells AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TestDBFirst.issuers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TestDBFirst.issuers", @"
    SELECT VALUE -- Constructing issuers
        [TestDBModel.issuer](T1.[issuer.C_Id], T1.[issuer.C_Issuer], T1.[issuer.C_IssuerShortName], T1.[issuer.C_Active])
    FROM (
        SELECT 
            T._Id AS [issuer.C_Id], 
            T._Issuer AS [issuer.C_Issuer], 
            T._IssuerShortName AS [issuer.C_IssuerShortName], 
            T._Active AS [issuer.C_Active], 
            True AS _from0
        FROM TestDBModelStoreContainer.issuers AS T
    ) AS T1");
        }
    }
}
